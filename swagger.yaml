openapi: 3.0.0
info:
  title: IMF Gadget API
  version: 1.0.0
  description: Secure API for managing classified IMF gadgets
servers:
  - url: http://localhost:3000
    description: Local server
  - url: https://imf-gadget-api-0akv.onrender.com
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Gadget:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [Available, Deployed, Destroyed, Decommissioned]
        missionSuccessProbability:
          type: integer
          minimum: 0
          maximum: 100
        createdAt:
          type: string
          format: date-time
        decommissionedAt:
          type: string
          format: date-time
          nullable: true

tags:
  - name: Authentication
    description: User registration and login
  - name: Gadgets
    description: Mission-critical gadget management

paths:
  /register:
    post:
      tags: [Authentication]
      summary: Register new agent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: ethan_hunt
                password:
                  type: string
                  example: impossible
      responses:
        201:
          description: Agent created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string

  /login:
    post:
      tags: [Authentication]
      summary: Authenticate agent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  example: ethan_hunt
                password:
                  type: string
                  example: impossible
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMzQ1IiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        401:
          description: Invalid credentials

  /gadgets:
    get:
      tags: [Gadgets]
      summary: List all gadgets
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [Available, Deployed, Destroyed, Decommissioned]
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gadget'
    post:
      tags: [Gadgets]
      summary: Create new gadget
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  example: Grappling Hook
      responses:
        201:
          description: Gadget created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gadget'

  /gadgets/{id}:
    patch:
      tags: [Gadgets]
      summary: Update gadget
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                status:
                  type: string
                  enum: [Available, Deployed, Destroyed, Decommissioned]
      responses:
        200:
          description: Gadget updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gadget'
        404:
          description: Gadget not found

    delete:
      tags: [Gadgets]
      summary: Decommission gadget
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Gadget decommissioned
        404:
          description: Gadget not found

  /gadgets/{id}/self-destruct:
    post:
      tags: [Gadgets]
      summary: Initiate self-destruct
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Destruct sequence initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  confirmationCode:
                    type: string
                    example: X9FG3H
        404:
          description: Gadget not found